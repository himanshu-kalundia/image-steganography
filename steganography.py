# -*- coding: utf-8 -*-
"""image steganography library.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lrXYTmNHGCDmeXaYTX2hU2b-9tOc6CNb
"""

import cv2
import numpy as np

def to_bin(data):
    if isinstance(data, str):
        return ''.join([format(ord(i), "08b") for i in data])
    elif isinstance(data, bytes) or isinstance(data, np.ndarray):
        return [format(i, "08b") for i in data]
    elif isinstance(data, int) or isinstance(data, np.uint8):
        return format(data, "08b")
    else:
        raise TypeError("Type not supported.")

def embed_text(image_file, secret_message, result_image_path, key):
    image = cv2.imdecode(np.frombuffer(image_file.read(), np.uint8), cv2.IMREAD_COLOR)
    
    # Use the key to seed the random number generator
    np.random.seed(key)

    secret_message += '!!!!!'
    bin_secret_msg = to_bin(secret_message)

    data_len = len(bin_secret_msg)
    data_index = 0

    # Create a random sequence of pixel indices
    total_pixels = image.shape[0] * image.shape[1]
    pixel_indices = np.random.choice(total_pixels, size=total_pixels, replace=False)

    for pixel_index in pixel_indices:
        row, col = divmod(pixel_index, image.shape[1])
        r, g, b = to_bin(image[row, col])

        if data_index < data_len:
            image[row, col, 0] = int(r[:-1] + bin_secret_msg[data_index], 2)
            data_index += 1
        if data_index < data_len:
            image[row, col, 1] = int(g[:-1] + bin_secret_msg[data_index], 2)
            data_index += 1
        if data_index < data_len:
            image[row, col, 2] = int(b[:-1] + bin_secret_msg[data_index], 2)
            data_index += 1
        if data_index >= data_len:
            break

    cv2.imwrite(result_image_path, image)

def extract_text(image_file, key):
    image = cv2.imdecode(np.frombuffer(image_file.read(), np.uint8), cv2.IMREAD_COLOR)
    
    # Use the key to seed the random number generator
    np.random.seed(key)

    bin_data = ""
    decoded_data = ""

    # Create a random sequence of pixel indices
    total_pixels = image.shape[0] * image.shape[1]
    pixel_indices = np.random.choice(total_pixels, size=total_pixels, replace=False)

    for pixel_index in pixel_indices:
        row, col = divmod(pixel_index, image.shape[1])
        r, g, b = to_bin(image[row, col])

        bin_data += r[-1]
        bin_data += g[-1]
        bin_data += b[-1]

    all_bytes = [bin_data[i: i + 8] for i in range(0, len(bin_data), 8)]
    for byte in all_bytes:
        decoded_data += chr(int(byte, 2))
        if decoded_data[-5:] == "!!!!!":
            break

    return str(decoded_data[:-5])